<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<extension>
  <name>GMAssert</name>
  <version>2.0.0</version>
  <packageID></packageID>
  <ProductID></ProductID>
  <date>15/04/19</date>
  <license>Free to use, also for commercial games.</license>
  <description></description>
  <helpfile></helpfile>
  <installdir></installdir>
  <classname></classname>
  <androidclassname></androidclassname>
  <sourcedir></sourcedir>
  <androidsourcedir></androidsourcedir>
  <macsourcedir></macsourcedir>
  <maclinkerflags></maclinkerflags>
  <maccompilerflags></maccompilerflags>
  <androidinject></androidinject>
  <androidmanifestinject></androidmanifestinject>
  <iosplistinject></iosplistinject>
  <androidactivityinject></androidactivityinject>
  <gradleinject></gradleinject>
  <iosSystemFrameworks/>
  <iosThirdPartyFrameworks/>
  <ConfigOptions>
    <Config name="Default">
      <CopyToMask>105554163798254</CopyToMask>
    </Config>
  </ConfigOptions>
  <androidPermissions/>
  <IncludedResources>
    <Resource>Scripts\GMAssert\__GMA_BREAKPOINT__.gml</Resource>
  </IncludedResources>
  <files>
    <file>
      <filename>GMAssert.gml</filename>
      <origname>extensions\GMAssert.gml</origname>
      <init></init>
      <final></final>
      <kind>2</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>9223372036854775807</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions>
        <function>
          <name>__gma_assert_error__</name>
          <externalName>__gma_assert_error__</externalName>
          <kind>11</kind>
          <help>__gma_assert_error__(message, expected, got)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>__gma_assert_error_simple__</name>
          <externalName>__gma_assert_error_simple__</externalName>
          <kind>11</kind>
          <help>__gma_assert_error_simple__(message, got)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>__gma_assert_error_raw__</name>
          <externalName>__gma_assert_error_raw__</externalName>
          <kind>11</kind>
          <help>__gma_assert_error_raw__(message, expected, got)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>__gma_equal__</name>
          <externalName>__gma_equal__</externalName>
          <kind>11</kind>
          <help>__gma_equal__(got, expected)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>__gma_equalish__</name>
          <externalName>__gma_equalish__</externalName>
          <kind>11</kind>
          <help>__gma_equalish__(got, expected)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>__gma_greater_than__</name>
          <externalName>__gma_greater_than__</externalName>
          <kind>11</kind>
          <help>__gma_greater_than__(got, expected)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>__gma_less_than__</name>
          <externalName>__gma_less_than__</externalName>
          <kind>11</kind>
          <help>__gma_less_than__(got, expected)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>__gma_greater_than_or_equal__</name>
          <externalName>__gma_greater_than_or_equal__</externalName>
          <kind>11</kind>
          <help>__gma_greater_than_or_equal__(got, expected)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>__gma_less_than_or_equal__</name>
          <externalName>__gma_less_than_or_equal__</externalName>
          <kind>11</kind>
          <help>__gma_less_than_or_equal__(got, expected)</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>__gma_debug_value__</name>
          <externalName>__gma_debug_value__</externalName>
          <kind>11</kind>
          <help>__gma_debug_value__(val, [noprefix])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>__gma_debug_list_value__</name>
          <externalName>__gma_debug_list_value__</externalName>
          <kind>11</kind>
          <help>__gma_debug_list_value__(val)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>assert</name>
          <externalName>assert</externalName>
          <kind>11</kind>
          <help>assert(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_fail</name>
          <externalName>assert_fail</externalName>
          <kind>11</kind>
          <help>assert_fail(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_operation</name>
          <externalName>assert_operation</externalName>
          <kind>11</kind>
          <help>assert_operation(got, expected, op, invert, [msg], [debug_got], [debug_expected])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_equal</name>
          <externalName>assert_equal</externalName>
          <kind>11</kind>
          <help>assert_equal(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_equalish</name>
          <externalName>assert_equalish</externalName>
          <kind>11</kind>
          <help>assert_equalish(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_is</name>
          <externalName>assert_is</externalName>
          <kind>11</kind>
          <help>assert_is(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_not_equal</name>
          <externalName>assert_not_equal</externalName>
          <kind>11</kind>
          <help>assert_not_equal(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_not_equalish</name>
          <externalName>assert_not_equalish</externalName>
          <kind>11</kind>
          <help>assert_not_equalish(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_isnt</name>
          <externalName>assert_isnt</externalName>
          <kind>11</kind>
          <help>assert_isnt(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_greater_than</name>
          <externalName>assert_greater_than</externalName>
          <kind>11</kind>
          <help>assert_greater_than(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_less_than</name>
          <externalName>assert_less_than</externalName>
          <kind>11</kind>
          <help>assert_less_than(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_greater_than_or_equal</name>
          <externalName>assert_greater_than_or_equal</externalName>
          <kind>11</kind>
          <help>assert_greater_than_or_equal(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_less_than_or_equal</name>
          <externalName>assert_less_than_or_equal</externalName>
          <kind>11</kind>
          <help>assert_less_than_or_equal(got, expected, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_is_string</name>
          <externalName>assert_is_string</externalName>
          <kind>11</kind>
          <help>assert_is_string(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_is_real</name>
          <externalName>assert_is_real</externalName>
          <kind>11</kind>
          <help>assert_is_real(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_is_array</name>
          <externalName>assert_is_array</externalName>
          <kind>11</kind>
          <help>assert_is_array(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_is_defined</name>
          <externalName>assert_is_defined</externalName>
          <kind>11</kind>
          <help>assert_is_defined(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_isnt_string</name>
          <externalName>assert_isnt_string</externalName>
          <kind>11</kind>
          <help>assert_isnt_string(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_isnt_real</name>
          <externalName>assert_isnt_real</externalName>
          <kind>11</kind>
          <help>assert_isnt_real(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_isnt_array</name>
          <externalName>assert_isnt_array</externalName>
          <kind>11</kind>
          <help>assert_isnt_array(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_isnt_defined</name>
          <externalName>assert_isnt_defined</externalName>
          <kind>11</kind>
          <help>assert_isnt_defined(got, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_in_range</name>
          <externalName>assert_in_range</externalName>
          <kind>11</kind>
          <help>assert_in_range(got, lower, upper, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_not_in_range</name>
          <externalName>assert_not_in_range</externalName>
          <kind>11</kind>
          <help>assert_not_in_range(got, lower, upper, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_contains</name>
          <externalName>assert_contains</externalName>
          <kind>11</kind>
          <help>assert_contains(got, content, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_contains_exact</name>
          <externalName>assert_contains_exact</externalName>
          <kind>11</kind>
          <help>assert_contains_exact(got, content, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_doesnt_contain</name>
          <externalName>assert_doesnt_contain</externalName>
          <kind>11</kind>
          <help>assert_doesnt_contain(got, content, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>assert_doesnt_contain_exact</name>
          <externalName>assert_doesnt_contain_exact</externalName>
          <kind>11</kind>
          <help>assert_doesnt_contain_exact(got, content, [msg])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
      </functions>
      <constants/>
    </file>
    <file>
      <filename>GMAssert.ext</filename>
      <origname>extensions\GMAssert.ext</origname>
      <init></init>
      <final></final>
      <kind>4</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>9223372036854775807</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions/>
      <constants>
        <constant>
          <name>GMASSERT_ENABLED</name>
          <value>true</value>
          <hidden>-1</hidden>
        </constant>
        <constant>
          <name>GMASSERT_TOLERANCE</name>
          <value>0.000001</value>
          <hidden>-1</hidden>
        </constant>
      </constants>
    </file>
  </files>
</extension>
